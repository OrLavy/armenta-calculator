{"version":3,"sources":["assets/armenta_logo.jpeg","serviceWorker.ts","theme/Theme.tsx","components/structure/Page.tsx","components/structure/ContentFitting.tsx","pages/CalculatorPage.tsx","components/header/Header.tsx","App.tsx","AppWrapper.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","baseTheme","responsiveFontSizes","createMuiTheme","palette","primary","main","secondary","background","typography","overrides","MuiPaper","root","MuiTypography","colorPrimary","MuiLink","useStyles","makeStyles","theme","page","height","width","maxWidth","boxSizing","paddingBottom","Page","React","memo","props","classes","children","className","contentFitter","ContentFitting","others","CalculatorPage","appBar","backgroundColor","paddingTop","zIndex","drawer","padding","spacing","toolbar","paddingRight","paddingLeft","margin","justifyContent","logo","link","color","marginLeft","transition","Header","AppBar","position","data-testid","Toolbar","to","src","Logo","alt","mainWrapper","minHeight","display","flexDirection","alignItems","appMain","headerSeparator","App","AppWrapper","StylesProvider","injectFirst","ThemeProvider","CssBaseline","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98e03947.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/armenta_logo.2465901b.jpeg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { blue } from \"@material-ui/core/colors\";\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\n\nconst COLOR1 = \"#0D0D0D\"; // dark gray\nconst COLOR2 = \"#6ec6d8\"; // bluish\nconst COLOR3 = \"#03FCF5\"; // bright bluish- Tetra\n\n// const PRIMARY_TEXT = '#dbdbdb';\nconst PRIMARY_TEXT = \"#dbdbdb\";\nconst SECONDARY_TEXT = \"#7B7B7B\";\n\nexport const HEADER_HEIGHT_REM = 6;\n\nexport const baseTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      // type: \"dark\",\n      primary: { main: \"#09142c\" },\n      secondary: { main: \"#00A1CB\" },\n      background: {\n        // default: \"#0a0f25\",\n        // paper: \"#192a45\",\n        // paper: \"#09142c\",\n      },\n    },\n    typography: {\n      // fontFamily: 'Montserrat',\n    },\n    overrides: {\n      MuiPaper: {\n        root: {\n          // backgroundColor: COLOR1,\n        },\n      },\n      MuiTypography: {\n        colorPrimary: {\n          // color: PRIMARY_TEXT,\n        },\n      },\n      MuiLink: {\n        root: {\n          // color: blue[500],\n        },\n      },\n    },\n  })\n);\n\nexport const AppStyles = {};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  page: {\n    height: \"100%\",\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n    boxSizing: \"border-box\",\n    paddingBottom: \"2em\",\n  },\n}));\n\nexport const Page = React.memo<IProps>((props) => {\n  const classes = useStyles();\n  const { children } = props;\n  return <div className={classes.page}>{children}</div>;\n});\n","import React, { DetailedHTMLProps } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface IProps {}\nconst useStyles = makeStyles((theme) => ({\n  contentFitter: {\n    height: \"100%\",\n    width: \"fit-content\",\n    maxWidth: \"100%\",\n  },\n}));\n\nexport const ContentFitting = React.memo<\n  IProps &\n    DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>\n>((props) => {\n  const classes = useStyles();\n  const { children, ...others } = props;\n  return (\n    <div className={classes.contentFitter} {...others}>\n      {children}\n    </div>\n  );\n});\n","import React from \"react\";\nimport { Page } from \"../components/structure/Page\";\nimport { ContentFitting } from \"../components/structure/ContentFitting\";\n\ninterface IProps {}\n\nexport const CalculatorPage = React.memo<IProps>((props) => {\n  return (\n    <Page>\n      <ContentFitting> CalculatorPage</ContentFitting>\n    </Page>\n  );\n});\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { HEADER_HEIGHT_REM } from \"../../theme/Theme\";\nimport { NavLink } from \"react-router-dom\";\nimport Link from \"@material-ui/core/Link\";\nimport Logo from \"../../assets/armenta_logo.jpeg\";\n\ninterface IProps {}\n\nexport const HOVER_COLOR = \"#00A1CB\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    backgroundColor: \"#fff\",\n    height: `${HEADER_HEIGHT_REM}rem`,\n    paddingTop: \"0.5rem\",\n    paddingBottom: \"0.5rem\",\n    boxSizing: \"border-box\",\n    // height: `${HEADER_HEIGHT_REM}rem`,\n    zIndex: theme.zIndex.drawer + 1,\n    // padding: `${theme.spacing(2)}px ${theme.spacing(8)}px`,\n    padding: theme.spacing(1),\n  },\n  toolbar: {\n    paddingRight: 0,\n    paddingLeft: 0,\n    // marginRight: 'auto',\n    // marginLeft: 'auto',\n    margin: \"auto\",\n    width: \"90%\",\n    maxWidth: \"90%\",\n    justifyContent: \"space-between\",\n  },\n  logo: {\n    width: \"10rem\",\n  },\n  link: {\n    color: \"#2B2B2B\", // DEV_NOTE : Taken from armenta\n    marginLeft: 30,\n    transition: \"color 0.4s ease-in-out\",\n    \"&:hover\": {\n      color: HOVER_COLOR,\n    },\n  },\n}));\n\nexport const Header = React.memo<IProps>((props) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"fixed\" data-testid=\"header\" className={classes.appBar}>\n      <Toolbar className={classes.toolbar}>\n        <NavLink to=\"/\">\n          <img className={classes.logo} src={Logo} alt=\"Armenta\" />\n          {/*<Link*/}\n          {/*  // @ts-ignore*/}\n          {/*  component={NavLink}*/}\n          {/*  exact={true}*/}\n          {/*  className={classes.link}*/}\n          {/*  // activeStyle={{ color: HOVER_COLOR }}*/}\n          {/*  underline=\"none\"*/}\n          {/*  to={\"/\"}*/}\n          {/*  variant=\"h6\"*/}\n          {/*  noWrap*/}\n          {/*>*/}\n          {/*  Armenta*/}\n          {/*</Link>*/}\n        </NavLink>\n      </Toolbar>\n    </AppBar>\n  );\n});\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { HEADER_HEIGHT_REM } from \"./theme/Theme\";\nimport { CalculatorPage } from \"./pages/CalculatorPage\";\nimport { Header } from \"./components/header/Header\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainWrapper: {\n    // minHeight: `calc(100% - ${HEADER_HEIGHT_REM}rem)`,\n    minHeight: `calc(100% - ${HEADER_HEIGHT_REM}rem)`,\n\n    // Center the content\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  appMain: {\n    height: \"100%\",\n    maxWidth: \"90%\",\n    boxSizing: \"border-box\",\n    padding: theme.spacing(2),\n  },\n\n  headerSeparator: {\n    height: `${HEADER_HEIGHT_REM}rem`,\n  },\n}));\n\nconst App = React.memo(() => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Header />\n      <div className={classes.headerSeparator} />\n      <div className={classes.mainWrapper}>\n        <main className={classes.appMain}>\n          <CalculatorPage />\n        </main>\n      </div>\n    </>\n  );\n});\n\nexport default App;\n","import React from \"react\";\nimport App from \"./App\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport {\n  makeStyles,\n  StylesProvider,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport { baseTheme } from \"./theme/Theme\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\ninterface IProps {}\n\nexport const AppWrapper = React.memo<IProps>((props) => {\n  return (\n    <Router>\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={baseTheme}>\n          <App /> <CssBaseline />\n        </ThemeProvider>\n      </StylesProvider>\n    </Router>\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {AppWrapper} from \"./AppWrapper\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}